#include <string.h>
#include "text.h"
#include "helpers.h"
	
const uint8_t symbols[][12] = {
	{
		BINARY(00000000), 
		BINARY(00011110),
		BINARY(00001010),
		BINARY(00001010),
		BINARY(00010010),
		BINARY(00010010),
		BINARY(00100010),
		BINARY(00111110),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(01111100),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01111100),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01111100),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(00111100),
		BINARY(01000010),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000010),
		BINARY(00111100),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(01111100),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01111100),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(00111110),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01111100),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01111110),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(01111110),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01111100),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(00111110),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000110),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(00111110),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01111110),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(01111100),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(01111100),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(01111110),
		BINARY(00000010),
		BINARY(00000010),
		BINARY(00000010),
		BINARY(00000010),
		BINARY(00000010),
		BINARY(00000010),
		BINARY(01000010),
		BINARY(00111100),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(01000010),
		BINARY(01000100),
		BINARY(01001000),
		BINARY(01010000),
		BINARY(01100000),
		BINARY(01010000),
		BINARY(01001000),
		BINARY(01000100),
		BINARY(01000010),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01111110),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(01000010),
		BINARY(01100110),
		BINARY(01100110),
		BINARY(01011010),
		BINARY(01011010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(01000010),
		BINARY(01100010),
		BINARY(01100010),
		BINARY(01010010),
		BINARY(01010010),
		BINARY(01001010),
		BINARY(01001010),
		BINARY(01000110),
		BINARY(01000110),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(00111100),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(00111100),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000),
		BINARY(01111100),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01111100),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000), 
		BINARY(00111100),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01010010),
		BINARY(01001010),
		BINARY(00111100),
		BINARY(00000010),
		BINARY(00000000),
	},{
		BINARY(00000000),
		BINARY(01111100),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01111100),
		BINARY(01100000),
		BINARY(01010000),
		BINARY(01001000),
		BINARY(01000110),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000),
		BINARY(00111100),
		BINARY(01000010),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(00111100),
		BINARY(00000010),
		BINARY(00000010),
		BINARY(01000010),
		BINARY(00111100),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000),
		BINARY(01111100),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(01000010),
		BINARY(00111100),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000),
		BINARY(01000100),
		BINARY(01000100),
		BINARY(01000100),
		BINARY(00101000),
		BINARY(00101000),
		BINARY(00101000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000),
		BINARY(01000100),
		BINARY(01000100),
		BINARY(01010100),
		BINARY(01010100),
		BINARY(01010100),
		BINARY(01010100),
		BINARY(01010100),
		BINARY(01010100),
		BINARY(00101000),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000),
		BINARY(01000100),
		BINARY(01000100),
		BINARY(00101000),
		BINARY(00101000),
		BINARY(00010000),
		BINARY(00101000),
		BINARY(00101000),
		BINARY(01000100),
		BINARY(01000100),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000),
		BINARY(01000100),
		BINARY(01000100),
		BINARY(00101000),
		BINARY(00101000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00000000),
		BINARY(00000000),
	},{
		BINARY(00000000),
		BINARY(01111110),
		BINARY(00000010),
		BINARY(00000010),
		BINARY(00000100),
		BINARY(00001000),
		BINARY(00010000),
		BINARY(00100000),
		BINARY(01000000),
		BINARY(01111110),
		BINARY(00000000),
		BINARY(00000000),
	}, {
		BINARY(00000000),
		BINARY(00000000),
		BINARY(00111000),
		BINARY(01000100),
		BINARY(01000100),
		BINARY(01100100),
		BINARY(01010100),
		BINARY(01001100),
		BINARY(01000100),
		BINARY(00111000),
		BINARY(00000000),
		BINARY(00000000),
	},{									
		BINARY(00000000),
		BINARY(00000000),
		BINARY(00010000),
		BINARY(00110000),
		BINARY(01010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(01111000),
		BINARY(00000000),
		BINARY(00000000),
	},{									
		BINARY(00000000),
		BINARY(00000000),
		BINARY(00111000),
		BINARY(01000100),
		BINARY(00000100),
		BINARY(00000100),
		BINARY(00001000),
		BINARY(00010000),
		BINARY(00100000),
		BINARY(01111100),
		BINARY(00000000),
		BINARY(00000000),
	},{									
		BINARY(00000000),
		BINARY(00000000),
		BINARY(00111000),
		BINARY(01000100),
		BINARY(00000100),
		BINARY(00000100),
		BINARY(00111000),
		BINARY(00000100),
		BINARY(01000100),
		BINARY(00111000),
		BINARY(00000000),
		BINARY(00000000),
	},{									
		BINARY(00000000),
		BINARY(00000000),
		BINARY(00001000),
		BINARY(00011000),
		BINARY(00101000),
		BINARY(01001000),
		BINARY(01111100),
		BINARY(00001000),
		BINARY(00001000),
		BINARY(00111100),
		BINARY(00000000),
		BINARY(00000000),
	},{									
		BINARY(00000000),
		BINARY(00000000),
		BINARY(01111100),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01111000),
		BINARY(00000100),
		BINARY(00000100),
		BINARY(01111000),
		BINARY(00000000),
		BINARY(00000000),
	},{									
		BINARY(00000000),
		BINARY(00000000),
		BINARY(00011100),
		BINARY(00100000),
		BINARY(01000000),
		BINARY(01000000),
		BINARY(01111000),
		BINARY(01000100),
		BINARY(01000100),
		BINARY(00111000),
		BINARY(00000000),
		BINARY(00000000),
	},{									
		BINARY(00000000),
		BINARY(00000000),
		BINARY(01111100),
		BINARY(01000100),
		BINARY(00001000),
		BINARY(00001000),
		BINARY(00010000),
		BINARY(00010000),
		BINARY(00100000),
		BINARY(00100000),
		BINARY(00000000),
		BINARY(00000000),
	},{									
		BINARY(00000000),
		BINARY(00000000),
		BINARY(00111000),
		BINARY(01000100),
		BINARY(01000100),
		BINARY(01000100),
		BINARY(00111000),
		BINARY(01000100),
		BINARY(01000100),
		BINARY(00111000),
		BINARY(00000000),
		BINARY(00000000),
	},{									
		BINARY(00000000),
		BINARY(00000000),
		BINARY(00111000),
		BINARY(01000100),
		BINARY(01000100),
		BINARY(00111100),
		BINARY(00000100),
		BINARY(00000100),
		BINARY(01000100),
		BINARY(00111000),
		BINARY(00000000),
		BINARY(00000000),
	}
};

const uint8_t minus[12] = {
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(01111100),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
};

const uint8_t plus[12] = {
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00010000),
	BINARY(00010000),
	BINARY(01111100),
	BINARY(00010000),
	BINARY(00010000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
};

const uint8_t quote[12] = {
	BINARY(00000000),
	BINARY(01100000),
	BINARY(01100000),
	BINARY(00100000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
	BINARY(00000000),
};

const uint8_t dot[12] = {
	BINARY(00000000), 
	BINARY(00000000), 
	BINARY(00000000), 
	BINARY(00000000), 
	BINARY(00000000), 
	BINARY(00000000), 
	BINARY(00000000), 
	BINARY(00000000), 
	BINARY(01100000),
	BINARY(01100000),
	BINARY(00000000),
	BINARY(00000000),
};

void Text::displayString(const char *string, uint8_t color, uint16_t x, uint16_t y, bool upscale){
	uint8_t len = strlen(string);
	for (uint8_t i = 0; i < len; i++){
		char c = string[i];
		const unsigned char *sym = 0;
		
		if (c >= 'a' && c <= 'z'){
			c -= 0x20;
		}
		
		if (c >= 'A' && c <= 'Z'){
			sym = symbols[c-'A'];
		}
		
		if (c >= '0' && c <= '9'){
			sym = symbols[c-'0'+26];
		}
		
		if (c == '-'){
			sym = minus;
		}
		
		if (c == '+'){
			sym = plus;
		}
		
		if (c == '\''){
			sym = quote;
		}
		
		if (c == '.'){
			sym =  dot;
		}
		
		if (sym){
			Engine::displaySpriteMask(sym, color, x, y, 1, 12, upscale);
		}
		
		x += upscale ? 16 : 8;
	}
}





